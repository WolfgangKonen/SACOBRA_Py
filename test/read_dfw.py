from enum import Enum

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


def read_dfw1(idp, n_splits, png_file = None):
    """
    Read the data frame dfw1 generated by test_rbf_width in testRbfsacob.py
    """
    deg1 = 1
    dfw1 = pd.read_feather("feather/dfw1.feather")
    print(dfw1.loc[dfw1['degree'] == deg1, ['width', 'kernel', 'degree', 'seed', 'inter', 'err']])
    print(dfw1.loc[dfw1['degree'] == 2, ['width', 'kernel', 'degree', 'seed', 'inter', 'err']])
    width1 = np.array(dfw1.loc[dfw1['degree'] == deg1, ['width']])
    width2 = np.array(dfw1.loc[dfw1['degree'] == 2, ['width']])
    err1 = np.array(dfw1.loc[dfw1['degree'] == deg1, ['err']])
    err2 = np.array(dfw1.loc[dfw1['degree'] == 2, ['err']])
    kernel = dfw1[0:1]['kernel'][0]

    ax = plt.subplot(111)
    ax.set_xscale("log")
    # ax.set_yscale("log")
    plt.plot(width1, err1, 'b-', label=f'deg={deg1}')
    plt.plot(width2, err2, 'r-', label=f'deg=2')
    plt.title(f'{kernel}, idp={idp}, folds={n_splits}')
    plt.xlabel('width', fontsize=16)
    plt.ylabel('approx err', fontsize=16)
    plt.grid(visible=True, which='major', axis='y')
    # plt.ylim(top=0.5, bottom=0.0)
    plt.legend()
    if png_file is not None:
        plt.savefig(png_file)
        print(f"Plot saved to {png_file}")
    plt.show()
    dummy = 0


def read_dfw2(gprob, runs, in_file=None, png_file = None):
    """
    Read the data frames dfw2 and lon2 generated by test_rbf_width in testRbfsacob.py.

    If PLT_PLOT, perform a matplotlib plot (optionally stored in png_file).

    If SNS_PLOT, read lon2 (longer data frame, one row for each run) and perform a seaborn plot.

    :param runs: the number of runs
    :param in_file: the filename of dfw2. If None, use "feather/dfw2.feather"
    :param png_file: where to save the matplotlib plot
    """
    if in_file is None: in_file = "feather/dfw2.feather"
    dfw2 = pd.read_feather(in_file)
    deg1 = 1
    print("\nmean(optim err):")
    print(dfw2.loc[dfw2['degree'] == deg1, ['width', 'kernel', 'degree', 'inter', 'err']])
    print(dfw2.loc[dfw2['degree'] == 2, ['width', 'kernel', 'degree', 'inter', 'err']])
    # dfw3 = dfw2.groupby(['width', 'kernel', 'degree', 'inter']).mean()   # average over 'seed' (i.e. over runs)
    cond1 = (dfw2['degree'] == deg1) & (dfw2['inter'] == "scipy")
    cond2 = (dfw2['degree'] == 2) & (dfw2['inter'] == "scipy")
    cond3 = (dfw2['degree'] == deg1) & (dfw2['inter'] == "sacobra")
    cond4 = (dfw2['degree'] == 2) & (dfw2['inter'] == "sacobra")
    width1 = np.array(dfw2.loc[cond1, ['width']])
    width2 = np.array(dfw2.loc[cond2, ['width']])
    err1 = np.array(dfw2.loc[cond1, ['err']])
    err2 = np.array(dfw2.loc[cond2, ['err']])
    err3 = np.array(dfw2.loc[cond3, ['err']])
    err4 = np.array(dfw2.loc[cond4, ['err']])
    kernel = dfw2[0:1]['kernel'][0]
    feval = dfw2[0:1]['feval'][0]

    PLT_PLOT = True
    if PLT_PLOT:
        ax = plt.subplot(111)
        ax.set_xscale("log")
        ax.set_yscale("log")
        if width1.size > 0:
            plt.plot(width1, err1, 'b-', label=f'deg={deg1} "scipy"')
            if err3.size > 0: plt.plot(width1, err3, 'b--', label=f'deg={deg1} "sacobra"')
        plt.plot(width2, err2, 'r-', label=f'deg=2 "scipy"')
        if err4.size > 0: plt.plot(width2, err4, 'r--', label=f'deg=2 "sacobra"')
        plt.title(f'{gprob}, {kernel}, feval={feval}, runs={runs}')
        plt.xlabel('width', fontsize=16)
        plt.ylabel('optim err', fontsize=16)
        plt.grid(visible=True, which='major', axis='y')
        # plt.ylim(top=0.5, bottom=0.0)
        plt.legend()
        if png_file is not None:
            plt.savefig(png_file)
            print(f"Plot saved to {png_file}")
        plt.show()

    lon_file = in_file.replace("dfw2", "lon2")
    lon2 = pd.read_feather(lon_file)

    SNS_PLOT = False
    if SNS_PLOT:
        # the seaborn plot does only work if lon2['err'] does NOT contain any np.nan (!!)
        #
        lon2 = lon2.drop(["feval","fbest"],axis=1)
        print("\nmean(optim err):")
        print(lon2.groupby(['kernel', 'degree', 'inter', 'width']).mean())
        print("\nmedian(optim err):")
        print(lon2.groupby(['kernel', 'degree', 'inter', 'width']).median())

        fig, ax = plt.subplots()
        sns.set_theme(style="darkgrid")
        sns.lineplot(x="width", y="err", errorbar=("ci", 0.99), hue="degree",
                     style="inter", data=lon2)      # palette="inferno",
        ax.set_xscale("log")
        ax.set_yscale("log")
        plt.show()

        x = lon2.groupby(['width',
                          'kernel',
                          'degree',
                          'inter']).std()


    class KERNEL(Enum):
        CUBIC = 0
        MULTIQUA = 1
        GAUSSIAN = 2

    # assert that the errors at specific width for all degrees are below upper bound upp_G*:
    if gprob == "G06":
                         # deg =  0   1     2
        upp_G06_w02 = np.array([[ 0, 1e-2, 1e-4],   # CUBIC
                                [ 0, 1e-2, 5e-6],   # MULTIQUA
                                [ 0, 1e-1, 1e-5]])  # GAUSSIAN
        for deg in [1,2]:
            if kernel == "cubic":
                upper = upp_G06_w02[KERNEL.CUBIC.value, deg]
            elif kernel == "multiquadric":
                upper = upp_G06_w02[KERNEL.MULTIQUA.value, deg]
            elif kernel == "gaussian":
                upper = upp_G06_w02[KERNEL.GAUSSIAN.value, deg]
            else:
                raise RuntimeError(f"Value kernel = {kernel} is not allowed")
            err = dfw2[(dfw2.width==0.02) & (dfw2.degree == deg) & (dfw2.inter == "scipy")]['err'][0]
            assert err < upper
    if gprob == "G09":
                         # deg =  0   1     2
        upp_G09_w02 = np.array([[ 0, 5e-2, 2e+1],   # CUBIC
                                [ 0, 3e-5, 9e-5],   # MULTIQUA
                                [ 0, 5e+3, 9e-5]])  # GAUSSIAN
        for deg in [1,2]:
            if kernel == "cubic":
                upper = upp_G09_w02[KERNEL.CUBIC.value, deg]
            elif kernel == "multiquadric":
                upper = upp_G09_w02[KERNEL.MULTIQUA.value, deg]
            elif kernel == "gaussian":
                upper = upp_G09_w02[KERNEL.GAUSSIAN.value, deg]
            else:
                raise RuntimeError(f"Value kernel = {kernel} is not allowed")
            err = dfw2[(dfw2.width==0.02) & (dfw2.degree == deg)]['err'][0]
            assert err < upper

if __name__ == '__main__':
    # read_dfw1()
    read_dfw2("G06", 6, in_file="feather/slv-G03-multiqua-dfw2.feather") # , png_file="plots/slv_G06_gaussian_runs006_500.png"
